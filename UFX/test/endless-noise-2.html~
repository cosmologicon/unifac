<!DOCTYPE html>
<link href='http://fonts.googleapis.com/css?family=Contrail+One' rel='stylesheet' type='text/css'>
<title>Endless noise test</title>
<script src="../src/draw.js"></script>
<script src="../src/ticker.js"></script>
<script src="../src/noise.js"></script>
<script src="../src/mouse.js"></script>
<script src="../src/key.js"></script>
<script src="../src/random.js"></script>
<h1>Endless noise test</h1>
<canvas id="canvas" style="border: 40px gray outset"></canvas>
<script>
var sx = 256*4, sy = 256*3
var canvas = document.getElementById("canvas")
canvas.width = sx ; canvas.height = sy
var context = canvas.getContext("2d")

function Noisescape(opts) {
	if (!(this instanceof Noisescape)) return new Noisescape(opts)
	this.init(opts || {})
}
Noisescape.prototype = {
	init: function (opts) {
		this.random = opts.random || Math.random  // A function that returns a random number in [0,1]
		this.ndatasize = opts.ndatasize || 100  // size of the Perlin noise data grid
		this.Lmin = opts.Lmin || 1  // minimum and maximum feature size
		this.Lmax = opts.Lmax || 256
		this.Lfactor = opts.Lfactor || 1.618  // factor separating consecutive feature sizes
		this.Ls = opts.Ls  // can optionally override feature sizes
		this.fpower = opts.fpower || 1.4  // feature power factor: 1 = white noise, 1.5 ~ pink noise
		
		this.psize = opts.psize || 256  // number of pixels in a parcel
		this.computegrad = opts.computegrad  // are we ever going to use the gradient data?

		this.colorfunc = opts.colorfunc  // callback to map raw data to color data

		this.context = opts.context || document.createElement("canvas").getContext("2d")

		this.makedata()
		
		this.cache = {}
		this.tick = 0
		
		this.queue = []
	},
	makedata: function () {
		// The Perlin noise data grid
		this.ndata = []
		for (var j = 0 ; j < this.ndatasize ; ++j) {
			var d = new Array()
			for (var k = 0 ; k < this.ndatasize ; ++k) d.push(this.random() * 2 - 1)
			d.push(d[0])
			this.ndata.push(d)
		}
		this.ndata.push(this.ndata[0])

		// Feature sizes
		if (!this.Ls) {
			this.Ls = [this.Lmax]
			while (this.Ls[this.Ls.length-1] > this.Lmin) {
				this.Ls.push(this.Ls[this.Ls.length-1] / this.Lfactor)
			}
		}
		this.nLs = this.Ls.length
		
		// Corresponding factors and offsets
		this.fms = this.Ls.map(function (x) { return 1/x })
		var power = this.fpower
		this.fps = this.Ls.map(function (x) { return Math.pow(x, power) })
		var fpsum = this.fps.reduce(function (x, y) { return x + y })
		this.fps = this.fps.map(function (x) { return 4.08 * x / fpsum })
		this.foffs = this.fps.map(function () { return this.random() * this.ndatasize }.bind(this))
	},
	// Reference implementation - best way to get a single value
	value: function (x, y) {
		var h = 0, n = this.ndatasize, d = this.ndata
		for (var j = 0 ; j < this.nLs ; ++j) {
			var m = this.fms[j], o = this.foffs[j], fp = this.fps[j]
			var ax = ((x * m + o) % n + n) % n, ix = Math.floor(ax), tx = ax - ix
			var ay = ((y * m + o) % n + n) % n, iy = Math.floor(ay), ty = ay - iy
			tx *= tx * (3 - 2 * tx)
			ty *= ty * (3 - 2 * ty)
			h += ((d[ix][iy] * (1-tx) + d[ix+1][iy] * tx) * (1-ty) + 
				 (d[ix][iy+1] * (1-tx) + d[ix+1][iy+1] * tx) * ty) * fp
		}
		return h
	},
	// Returns [h(x,y), d/dx h(x,y), d/dy h(x,y)]
	valuegrad: function (x, y) {
		var h = 0, gx = 0, gy = 0, n = this.ndatasize, d = this.ndata
		for (var j = 0 ; j < this.nLs ; ++j) {
			var m = this.fms[j], o = this.foffs[j], fp = this.fps[j]
			var ax = ((x * m + o) % n + n) % n, ix = Math.floor(ax), tx = ax - ix
			var ay = ((y * m + o) % n + n) % n, iy = Math.floor(ay), ty = ay - iy
			var dx = 6 * tx * (1 - tx), dy = 6 * ty * (1 - ty)
			tx *= tx * (3 - 2 * tx)
			ty *= ty * (3 - 2 * ty)
			var A = d[ix][iy], B = d[ix+1][iy], C = d[ix][iy+1], D = d[ix+1][iy+1]
			h += ((A * (1-tx) + B * tx) * (1-ty) + (C * (1-tx) + D * tx) * ty) * fp
			gx += dx * ((B - A) * (1-ty) + (D - C) * ty) * fp * m
			gy += dy * ((C - A) * (1-tx) + (D - B) * tx) * fp * m
		}
		return [h, gx, gy]
	},
	// Returns a 1-dimensional psize^2 array of the noise values
	parcel: function (px, py, z) {
		z = z || 1
		var txs = [], ixs = [], tys = [], iys = [], n = this.ndatasize, d = this.ndata
		for (var k = 0 ; k < this.psize ; ++k) {
			for (var j = 0 ; j < this.nLs ; ++j) {
				var m = this.fms[j], o = this.foffs[j]
				var x = (px * this.psize + k + 0.5) * z, ax = ((x * m + o) % n + n) % n, ix = Math.floor(ax)
				var y = (py * this.psize + k + 0.5) * z, ay = ((y * m + o) % n + n) % n, iy = Math.floor(ay)
				var tx = ax - ix, ty = ay - iy
				txs.push(tx*tx*(3-2*tx)) ; ixs.push(ix)
				tys.push(ty*ty*(3-2*ty)) ; iys.push(iy)
			}
		}

		var data = []
		for (var y = 0, jy = 0 ; y < this.psize ; ++y, jy += this.nLs) {
			for (var x = 0, jx = 0 ; x < this.psize ; ++x, jx += this.nLs) {
				var h = 0
				for (var j = 0 ; j < this.nLs ; ++j) {
					var tx = txs[jx+j], ix = ixs[jx+j]
					var ty = tys[jy+j], iy = iys[jy+j]
					h += ((d[ix][iy] * (1-tx) + d[ix+1][iy] * tx) * (1-ty) + 
						 (d[ix][iy+1] * (1-tx) + d[ix+1][iy+1] * tx) * ty) * this.fps[j]
				}
				data.push(h)
			}
		}
		return data
	},
	parcelgrad: function (px, py, z) {
		z = z || 1
		var txs = [], ixs = [], tys = [], iys = [], dxs = [], dys = []
		var n = this.ndatasize, d = this.ndata
		for (var k = 0 ; k < this.psize ; ++k) {
			for (var j = 0 ; j < this.nLs ; ++j) {
				var m = this.fms[j], o = this.foffs[j]
				var x = (px * this.psize + k + 0.5) * z, ax = ((x * m + o) % n + n) % n, ix = Math.floor(ax)
				var y = (py * this.psize + k + 0.5) * z, ay = ((y * m + o) % n + n) % n, iy = Math.floor(ay)
				var tx = ax - ix, ty = ay - iy
				txs.push(tx*tx*(3-2*tx)) ; ixs.push(ix) ; dxs.push(6*tx*(1-tx))
				tys.push(ty*ty*(3-2*ty)) ; iys.push(iy) ; dys.push(6*ty*(1-ty))
			}
		}

		var hdata = [], gxdata = [], gydata = []
		for (var y = 0, jy = 0 ; y < this.psize ; ++y, jy += this.nLs) {
			for (var x = 0, jx = 0 ; x < this.psize ; ++x, jx += this.nLs) {
				var h = 0, gx = 0, gy = 0
				for (var j = 0 ; j < this.nLs ; ++j) {
					var tx = txs[jx+j], ix = ixs[jx+j], dx = dxs[jx+j]
					var ty = tys[jy+j], iy = iys[jy+j], dy = dys[jx+j]
					var fp = this.fps[j], m = this.fms[j]
					var A = d[ix][iy], B = d[ix+1][iy], C = d[ix][iy+1], D = d[ix+1][iy+1]
					h += ((A * (1-tx) + B * tx) * (1-ty) + (C * (1-tx) + D * tx) * ty) * fp
					gx += dx * ((B - A) * (1-ty) + (D - C) * ty) * fp * m
					gy += dy * ((C - A) * (1-tx) + (D - B) * tx) * fp * m
				}
				hdata.push(h)
				gxdata.push(gx)
				gydata.push(gy)
			}
		}
		return [hdata, gxdata, gydata]
	},
	work: function (px, py, z) {
		var key = px + "," + py + "," + z
		if (!this.cache[key]) {
			this.cache[key] = { px: px, py: py, z: z }
			return false
		}
		return this.workon(this.cache[key])
	},


	workon: function (obj) {
		if (obj.done) return true
		if (!obj.hdone) {
			this.workonparcel(obj)
			return false
		} else if (!obj.cdone) {
			this.workonidata(obj)
			return false
		} else if (!obj.canvasdone) {
			this.workoncanvas(obj)
			return false
		}
		return obj.done = true
	},
	
	workonparcel: function (obj) {
		if (!obj.txs) {
			var px = obj.px, py = obj.py, z = obj.z
			var txs = obj.txs = [], ixs = obj.ixs = [], dxs = obj.dxs = []
			var tys = obj.tys = [], iys = obj.iys = [], dys = obj.dys = []
			var n = this.ndatasize
			for (var k = 0 ; k < this.psize ; ++k) {
				for (var j = 0 ; j < this.nLs ; ++j) {
					var m = this.fms[j], o = this.foffs[j]
					var x = (px * this.psize + k + 0.5) * z
					var y = (py * this.psize + k + 0.5) * z
					var ax = ((x * m + o) % n + n) % n, ix = Math.floor(ax)
					var ay = ((y * m + o) % n + n) % n, iy = Math.floor(ay)
					var tx = ax - ix, ty = ay - iy
					txs.push(tx*tx*(3-2*tx)) ; ixs.push(ix) ; dxs.push(6*tx*(1-tx))
					tys.push(ty*ty*(3-2*ty)) ; iys.push(iy) ; dys.push(6*ty*(1-ty))
				}
			}
			obj.hdata = [] ; obj.gxdata = [] ; obj.gydata = []
			obj.hy = 0
			return
		}
		var y = obj.hy, jy = y * this.nLs, d = this.ndata
		for (var x = 0, jx = 0 ; x < this.psize ; ++x, jx += this.nLs) {
			var h = 0, gx = 0, gy = 0
			for (var j = 0 ; j < this.nLs ; ++j) {
				var tx = obj.txs[jx+j], ix = obj.ixs[jx+j], dx = obj.dxs[jx+j]
				var ty = obj.tys[jy+j], iy = obj.iys[jy+j], dy = obj.dys[jy+j]
				var fp = this.fps[j], m = this.fms[j]
				var A = d[ix][iy], B = d[ix+1][iy], C = d[ix][iy+1], D = d[ix+1][iy+1]
				h += ((A * (1-tx) + B * tx) * (1-ty) + (C * (1-tx) + D * tx) * ty) * fp
				gx += dx * ((B - A) * (1-ty) + (D - C) * ty) * fp * m
				gy += dy * ((C - A) * (1-tx) + (D - B) * tx) * fp * m
			}
			obj.hdata.push(h)
			obj.gxdata.push(gx)
			obj.gydata.push(gy)
		}
		if (++obj.hy == this.psize) {
			obj.hdone = true
		}
	},
	
	workonidata: function (obj) {
		if (!obj.idata) {
			obj.idata = this.context.createImageData(this.psize, this.psize)
		}
		var ps = this.psize, ps2 = ps * ps
		var cj = obj.cj = obj.cj || 0
		var cjmax = Math.min(cj + 1000, ps2)
		var data = obj.idata.data, hdata = obj.hdata, gxdata = obj.gxdata, gydata = obj.gydata
		var x0 = obj.px * ps + 0.5, y0 = obj.py * ps + 0.5, z = obj.z
		for ( ; cj < cjmax ; ++cj) {
			this.colorfunc(cj*4, data, hdata[cj], gxdata[cj], gydata[cj], x0, y0, z, ps)
		}
		obj.cj = cj
		if (obj.cj == ps2) obj.cdone = true
	},
	
	workoncanvas: function (obj) {
		if (!obj.canvas) {
			obj.canvas = document.createElement("canvas")
			obj.canvas.width = this.psize
			obj.canvas.height = this.psize
			obj.context = obj.canvas.getContext("2d")
			return
		}
		obj.context.putImageData(obj.idata, 0, 0)
		obj.canvasdone = true
	},
	
	getcanvas: function (px, py, z) {
		z = z || 1
		var key = px + "," + py + "," + z
		return this.cache[key] ? this.cache[key].canvas : null
	},

}


for (var j = 0 ; j < 12 ; ++j) {
	UFX.random.seed = 3045
	var noise = Noisescape({
		psize: 256,
		fpower: [0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, 2.2, 2.4, 2.6][j],
		random: UFX.random,
		colorfunc: function (j, data, h, gx, gy) {
			var c = Math.floor(Math.min(Math.max(h * 80 + 40, 0), 255))
			var g = 1 //(gx + gy * 2) * 4 + 1
			data[j++] = c/2 * g
			data[j++] = c ? (120 + c/2) * g : 0
			data[j++] = c ? 0 : 255
			data[j] = 255
		},
	})
	while (!noise.work(0,1,1));
	context.drawImage(noise.getcanvas(0,1,1), (j%4)*256, j>>2<<8)
}

if (false) {
	var x = UFX.random(10000), y = UFX.random(10000), h = 0.0001
	noise.valuegrad(x, y)
	console.log(noise.value(x,y), noise.valuegrad(x,y)[0])
	console.log((noise.value(x+h,y) - noise.value(x-h,y))/(2*h), noise.valuegrad(x,y)[1])
	console.log((noise.value(x,y+h) - noise.value(x,y-h))/(2*h), noise.valuegrad(x,y)[2])
}

t0 = Date.now()
//while (!noise.work(0,0,1)) { console.log(Date.now() - t0) ; t0 = Date.now() }
while (!noise.work(0,1,1));
//while (!noise.work(1,1,1));
console.log(Date.now() - t0)
//context.drawImage(noise.getcanvas(0,0,1), 0, 0)
//context.drawImage(noise.getcanvas(1,0,1), 256, 0)
//context.drawImage(noise.getcanvas(0,1,1), 0, 256)
//context.drawImage(noise.getcanvas(1,1,1), 256, 256)


/*


// Reference implementations (slow)
function noisevalue(x, y) {
	x = (x % nsize + nsize) % nsize
	y = (y % nsize + nsize) % nsize
	var ix = Math.floor(x), iy = Math.floor(y)
	var tx = x - ix, ty = y - iy
	tx *= tx * (3 - 2 * tx)
	ty *= ty * (3 - 2 * ty)
	return ((ndata[ix][iy] * (1-tx) + ndata[ix+1][iy] * tx) * (1-ty) + 
	        (ndata[ix][iy+1] * (1-tx) + ndata[ix+1][iy+1] * tx) * ty)
}
// grad(noisevalue(x, y))
function gradvalue(x, y) {
	x = (x % nsize + nsize) % nsize
	y = (y % nsize + nsize) % nsize
	var ix = Math.floor(x), iy = Math.floor(y)
	var tx = x - ix, ty = y - iy
	var dx = 6 * tx * (1 - tx), dy = 6 * ty * (1 - ty)
	tx *= tx * (3 - 2 * tx)
	ty *= ty * (3 - 2 * ty)
	return [((ndata[ix][iy] * (-dx) + ndata[ix+1][iy] * dx) * (1-ty) + 
		(ndata[ix][iy+1] * (-dx) + ndata[ix+1][iy+1] * dx) * ty),
		((ndata[ix][iy] * (1-tx) + ndata[ix+1][iy] * tx) * (-dy) + 
		(ndata[ix][iy+1] * (1-tx) + ndata[ix+1][iy+1] * tx) * dy)]
}
function height0(x, y) {
	var h = 0
	for (var j = 0 ; j < nLs ; ++j) {
		var m = fms[j], o = foffs[j], fp = fps[j]
		h += noisevalue(x*m + o, y*m + o) * fp
	}
	return h
}
function grad0(x, y) {
	var gx = 0, gy = 0
	for (var j = 0 ; j < nLs ; ++j) {
		var m = fms[j], o = foffs[j], fp = fps[j]
		var g = gradvalue(x*m + o, y*m + o)
		gx += g[0] * m * fp
		gy += g[1] * m * fp
	}
	return [gx, gy]
}


// Cached coordinate values
var dpcache = {}
function getdp(dx, z) {
	z = z || 1
	key = dx + "," + z
	if (!dpcache[key]) {
		var dp = []
		for (var j = 0 ; j < psize ; ++j) {
			var x0 = dx * psize + j, a = []
			for (var k = 0 ; k < nLs ; ++k) {
				var x = x0 * z / fs[k] + foffs[k]
				x = (x % nsize + nsize) % nsize
				a.push(Math.floor(x))
				a.push(x - Math.floor(x))
			}
			dp.push(a)
		}
		dpcache[key] = dp
	}
	return dpcache[key]
}

function compute(px, py, z) {
	var dpxs = getdp(px, z), dpys = getdp(py, z)
	var data = Array(psize*psize)
	for (var y = 0, j = 0 ; y < psize ; ++y) {
		for (var x = 0 ; x < psize ; ++x, ++j) {
			var d = 0
			for (var k = 0, c = 0 ; k < nLs ; ++k) {
				var ix = dpxs[x][c], iy = dpys[y][c++], tx = dpxs[x][c], ty = dpys[y][c++]
				d += ((ndata[ix][iy] * (1-tx) + ndata[ix+1][iy] * tx) * (1-ty) + 
					 (ndata[ix][iy+1] * (1-tx) + ndata[ix+1][iy+1] * tx) * ty) * fs[k]
			}
			data[j] = d
		}
	}
	return data
}

function compute0(px, py, z) {
	var data = Array(psize*psize)
	for (var y = 0, j = 0 ; y < psize ; ++y) {
		for (var x = 0 ; x < psize ; ++x, ++j) {
			var d = 0
			for (var k = 0 ; k < nLs ; ++k) {
				var ax = (((px * psize + x) * z / fs[k] + foffs[k]) % nsize + nsize) % nsize
				var ix = Math.floor(ax), tx = ax - ix
				var ay = (((py * psize + y) * z / fs[k] + foffs[k]) % nsize + nsize) % nsize
				var iy = Math.floor(ay), ty = ay - iy
				d += ((ndata[ix][iy] * (1-tx) + ndata[ix+1][iy] * tx) * (1-ty) + 
					 (ndata[ix][iy+1] * (1-tx) + ndata[ix+1][iy+1] * tx) * ty) * fs[k]
			}
			data[j] = d
		}
	}
	return data
}

function compute1(px, py, z) {
	var data = Array(psize*psize)
	for (var y = 0, j = 0 ; y < psize ; ++y) {
		for (var x = 0 ; x < psize ; ++x, ++j) {
			data[j] = height0((px * psize + x) * z, (py * psize + y) * z)
		}
	}
	return data
}

function makecolordata(data, gxdata, gydata, cdata) {
	for (var j = 0, k = 0 ; j < data.length ; ++j) {
		var c = Math.floor(Math.min(Math.max(data[j] * 80 + 40, 0), 255))
		var g = (gxdata[j] + gydata[j] * 2) * 4 + 1
		cdata[k++] = c/2 * g
		cdata[k++] = c ? (120 + c/2) * g : 0
		cdata[k++] = c ? 0 : 255
		cdata[k++] = 255
	}
}
function makecolordata0(data, cdata) {
	for (var j = 0, k = 0 ; j < data.length ; ++j) {
		var c = Math.floor(Math.min(Math.max(data[j] * 0.8 + 10, 0), 255))
		cdata[k++] = c
		cdata[k++] = c
		cdata[k++] = c
		cdata[k++] = 255
	}
}

if (false) {
	var t0 = Date.now()
	for (var x = 0 ; x < sx ; ++x) {
		for (var y = 0 ; y < sy ; ++y) {
			var h = height0(x, y)
			var c = Math.floor(Math.min(Math.max(h * 0.8 + 20, 0), 255))
			context.fillStyle = "rgb(" + c + "," + c + "," + c + ")"
			context.fillRect(x, y, 1, 1)
		}
	}
	console.log(Date.now() - t0)
}
if (true) {
	var t0 = Date.now()
	var hdata = [], gxdata = [], gydata = []
	var z = 1
	for (var y = 0 ; y < sy ; ++y) {
		for (var x = 0 ; x < sx ; ++x) {
			hdata.push(height0(x/z, y/z))
			var g = grad0(x/z, y/z)
			gxdata.push(g[0])
			gydata.push(g[1])
		}
	}
	var idata = context.createImageData(sx, sy)
	makecolordata(hdata, gxdata, gydata, idata.data)
	context.putImageData(idata, 0, 0)
	console.log(Date.now() - t0)
}
if (false) {
	var t0 = Date.now()
	var idata = context.createImageData(psize, psize)
	for (var x = 0 ; x < 4 ; ++x) {
		for (var y = 0 ; y < 3 ; ++y) {
			makecolordata(compute(x, y, 1), idata.data)
			context.putImageData(idata, psize*x, psize*y)
		}
	}
	console.log(Date.now() - t0)
}
if (false) {
	var t0 = Date.now()
	var idata = context.createImageData(psize, psize)
	for (var x = 0 ; x < 1 ; ++x) {
		for (var y = 0 ; y < 1 ; ++y) {
			makecolordata(compute0(x, y, 1), idata.data)
			context.putImageData(idata, psize*x, psize*y)
		}
	}
	console.log(Date.now() - t0)
}
if (false) {
	var t0 = Date.now()
	var idata = context.createImageData(psize, psize)
	for (var x = 0 ; x < 1 ; ++x) {
		for (var y = 0 ; y < 1 ; ++y) {
			makecolordata(compute1(x, y, 1), idata.data)
			context.putImageData(idata, psize*x, psize*y)
		}
	}
	console.log(Date.now() - t0)
}
*/
</script>




