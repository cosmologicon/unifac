<!DOCTYPE html>
<link href='http://fonts.googleapis.com/css?family=Contrail+One' rel='stylesheet' type='text/css'>
<title>Endless noise test</title>
<script src="../src/draw.js"></script>
<script src="../src/ticker.js"></script>
<script src="../src/noise.js"></script>
<script src="../src/mouse.js"></script>
<script src="../src/key.js"></script>
<script src="../src/random.js"></script>
<h1>Endless noise test</h1>
<canvas id="canvas" style="border: 40px gray outset"></canvas>
<script>
var sx = 256*4, sy = 256*3
var canvas = document.getElementById("canvas")
canvas.width = sx ; canvas.height = sy
var context = canvas.getContext("2d")


var random = UFX.random
UFX.random.seed = 14045


// random noise data
var nsize = 100
var ndata = []
for (var j = 0 ; j < nsize ; ++j) {
	var d = new Array()
	for (var k = 0 ; k < nsize ; ++k) {
		d.push(random() * 2 - 1)
	}
	d.push(d[0])
	ndata.push(d)
}
ndata.push(ndata[0])

// feature sizes
var fsmin = 0.1, fsmax = 200, fsfactor = 1.8
var fs = [fsmax]
while (fs[fs.length-1] > fsmin) fs.push(fs[fs.length-1] / fsfactor)
var nfs = fs.length
var power = 1.4
var fms = [], fps = []  // feature multiplier, feature power factor
for (var k = 0 ; k < nfs ; ++k) {
	fms.push(1/fs[k])
	fps.push(Math.pow(fs[k], power))
}
var fpsum = fps.reduce(function (x, y) { return x + y })
fps = fps.map(function (x) { return 4 * x / fpsum })

var foffs = []
while (foffs.length < nfs) foffs.push(random() * nsize)

// parcel size
var psize = 256


// Reference implementations (slow)
function noisevalue(x, y) {
	x = (x % nsize + nsize) % nsize
	y = (y % nsize + nsize) % nsize
	var ix = Math.floor(x), iy = Math.floor(y)
	var tx = x - ix, ty = y - iy
	tx *= tx * (3 - 2 * tx)
	ty *= ty * (3 - 2 * ty)
	return ((ndata[ix][iy] * (1-tx) + ndata[ix+1][iy] * tx) * (1-ty) + 
	        (ndata[ix][iy+1] * (1-tx) + ndata[ix+1][iy+1] * tx) * ty)
}
// grad(noisevalue(x, y))
function gradvalue(x, y) {
	x = (x % nsize + nsize) % nsize
	y = (y % nsize + nsize) % nsize
	var ix = Math.floor(x), iy = Math.floor(y)
	var tx = x - ix, ty = y - iy
	var dx = 6 * tx * (1 - tx), dy = 6 * ty * (1 - ty)
	tx *= tx * (3 - 2 * tx)
	ty *= ty * (3 - 2 * ty)
	return [((ndata[ix][iy] * (-dx) + ndata[ix+1][iy] * dx) * (1-ty) + 
		(ndata[ix][iy+1] * (-dx) + ndata[ix+1][iy+1] * dx) * ty),
		((ndata[ix][iy] * (1-tx) + ndata[ix+1][iy] * tx) * (-dy) + 
		(ndata[ix][iy+1] * (1-tx) + ndata[ix+1][iy+1] * tx) * dy)]
}
function height0(x, y) {
	var h = 0
	for (var j = 0 ; j < nfs ; ++j) {
		var m = fms[j], o = foffs[j], fp = fps[j]
		h += noisevalue(x*m + o, y*m + o) * fp
	}
	return h
}
function grad0(x, y) {
	var gx = 0, gy = 0
	for (var j = 0 ; j < nfs ; ++j) {
		var m = fms[j], o = foffs[j], fp = fps[j]
		var g = gradvalue(x*m + o, y*m + o)
		gx += g[0] * m * fp
		gy += g[1] * m * fp
	}
	return [gx, gy]
}


// Cached coordinate values
var dpcache = {}
function getdp(dx, z) {
	z = z || 1
	key = dx + "," + z
	if (!dpcache[key]) {
		var dp = []
		for (var j = 0 ; j < psize ; ++j) {
			var x0 = dx * psize + j, a = []
			for (var k = 0 ; k < nfs ; ++k) {
				var x = x0 * z / fs[k] + foffs[k]
				x = (x % nsize + nsize) % nsize
				a.push(Math.floor(x))
				a.push(x - Math.floor(x))
			}
			dp.push(a)
		}
		dpcache[key] = dp
	}
	return dpcache[key]
}

function compute(px, py, z) {
	var dpxs = getdp(px, z), dpys = getdp(py, z)
	var data = Array(psize*psize)
	for (var y = 0, j = 0 ; y < psize ; ++y) {
		for (var x = 0 ; x < psize ; ++x, ++j) {
			var d = 0
			for (var k = 0, c = 0 ; k < nfs ; ++k) {
				var ix = dpxs[x][c], iy = dpys[y][c++], tx = dpxs[x][c], ty = dpys[y][c++]
				d += ((ndata[ix][iy] * (1-tx) + ndata[ix+1][iy] * tx) * (1-ty) + 
					 (ndata[ix][iy+1] * (1-tx) + ndata[ix+1][iy+1] * tx) * ty) * fs[k]
			}
			data[j] = d
		}
	}
	return data
}

function compute0(px, py, z) {
	var data = Array(psize*psize)
	for (var y = 0, j = 0 ; y < psize ; ++y) {
		for (var x = 0 ; x < psize ; ++x, ++j) {
			var d = 0
			for (var k = 0 ; k < nfs ; ++k) {
				var ax = (((px * psize + x) * z / fs[k] + foffs[k]) % nsize + nsize) % nsize
				var ix = Math.floor(ax), tx = ax - ix
				var ay = (((py * psize + y) * z / fs[k] + foffs[k]) % nsize + nsize) % nsize
				var iy = Math.floor(ay), ty = ay - iy
				d += ((ndata[ix][iy] * (1-tx) + ndata[ix+1][iy] * tx) * (1-ty) + 
					 (ndata[ix][iy+1] * (1-tx) + ndata[ix+1][iy+1] * tx) * ty) * fs[k]
			}
			data[j] = d
		}
	}
	return data
}

function compute1(px, py, z) {
	var data = Array(psize*psize)
	for (var y = 0, j = 0 ; y < psize ; ++y) {
		for (var x = 0 ; x < psize ; ++x, ++j) {
			data[j] = height0((px * psize + x) * z, (py * psize + y) * z)
		}
	}
	return data
}

function makecolordata(data, gxdata, gydata, cdata) {
	for (var j = 0, k = 0 ; j < data.length ; ++j) {
		var c = Math.floor(Math.min(Math.max(data[j] * 80 + 40, 0), 255))
		var g = (gxdata[j] + gydata[j] * 2) * 4 + 1
		cdata[k++] = c/2 * g
		cdata[k++] = c ? (120 + c/2) * g : 0
		cdata[k++] = c ? 0 : 255
		cdata[k++] = 255
	}
}
function makecolordata0(data, cdata) {
	for (var j = 0, k = 0 ; j < data.length ; ++j) {
		var c = Math.floor(Math.min(Math.max(data[j] * 0.8 + 10, 0), 255))
		cdata[k++] = c
		cdata[k++] = c
		cdata[k++] = c
		cdata[k++] = 255
	}
}

if (false) {
	var t0 = Date.now()
	for (var x = 0 ; x < sx ; ++x) {
		for (var y = 0 ; y < sy ; ++y) {
			var h = height0(x, y)
			var c = Math.floor(Math.min(Math.max(h * 0.8 + 20, 0), 255))
			context.fillStyle = "rgb(" + c + "," + c + "," + c + ")"
			context.fillRect(x, y, 1, 1)
		}
	}
	console.log(Date.now() - t0)
}
if (true) {
	var t0 = Date.now()
	var hdata = [], gxdata = [], gydata = []
	var z = 0.25
	for (var y = 0 ; y < sy ; ++y) {
		for (var x = 0 ; x < sx ; ++x) {
			hdata.push(height0(x/z, y/z))
			var g = grad0(x/z, y/z)
			gxdata.push(g[0])
			gydata.push(g[1])
		}
	}
	var idata = context.createImageData(sx, sy)
	makecolordata(hdata, gxdata, gydata, idata.data)
	context.putImageData(idata, 0, 0)
	console.log(Date.now() - t0)
}
if (false) {
	var t0 = Date.now()
	var idata = context.createImageData(psize, psize)
	for (var x = 0 ; x < 4 ; ++x) {
		for (var y = 0 ; y < 3 ; ++y) {
			makecolordata(compute(x, y, 1), idata.data)
			context.putImageData(idata, psize*x, psize*y)
		}
	}
	console.log(Date.now() - t0)
}
if (false) {
	var t0 = Date.now()
	var idata = context.createImageData(psize, psize)
	for (var x = 0 ; x < 1 ; ++x) {
		for (var y = 0 ; y < 1 ; ++y) {
			makecolordata(compute0(x, y, 1), idata.data)
			context.putImageData(idata, psize*x, psize*y)
		}
	}
	console.log(Date.now() - t0)
}
if (false) {
	var t0 = Date.now()
	var idata = context.createImageData(psize, psize)
	for (var x = 0 ; x < 1 ; ++x) {
		for (var y = 0 ; y < 1 ; ++y) {
			makecolordata(compute1(x, y, 1), idata.data)
			context.putImageData(idata, psize*x, psize*y)
		}
	}
	console.log(Date.now() - t0)
}

</script>




